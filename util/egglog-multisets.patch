diff --git a/src/sort/multiset.rs b/src/sort/multiset.rs
index f1c276e..df6033f 100644
--- a/src/sort/multiset.rs
+++ b/src/sort/multiset.rs
@@ -95,6 +95,14 @@ mod inner {
             }
             multiset
         }
+
+        /// Compute the sum of two multisets.
+        pub fn sum(self, MultiSet(other_map, other_count): Self) -> Self {
+            Self(
+                self.0.union_with(other_map, std::ops::Add::add),
+                self.1 + other_count,
+            )
+        }
     }
 }
 
@@ -130,6 +138,7 @@ impl Presort for MultiSetSort {
             "multiset-not-contains".into(),
             "multiset-remove".into(),
             "multiset-length".into(),
+            "multiset-sum".into(),
             "unstable-multiset-map".into(),
         ]
     }
@@ -233,6 +242,10 @@ impl Sort for MultiSetSort {
             name: "multiset-pick".into(),
             multiset: self.clone(),
         });
+        typeinfo.add_primitive(Sum {
+            name: "multiset-sum".into(),
+            multiset: self.clone(),
+        });
         let inner_name = self.element.name();
         let fn_sort = typeinfo.get_sort_by(|s: &Arc<FunctionSort>| {
             (s.output.name() == inner_name)
@@ -317,7 +330,11 @@ impl PrimitiveLike for MultiSetOf {
             .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = MultiSet::from_iter(values.iter().copied());
         Some(multiset.store(&self.multiset).unwrap())
     }
@@ -346,7 +363,11 @@ impl PrimitiveLike for Insert {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         let multiset = multiset.insert(values[1]);
         multiset.store(&self.multiset)
@@ -376,7 +397,11 @@ impl PrimitiveLike for Contains {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         if multiset.contains(&values[1]) {
             Some(Value::unit())
@@ -409,7 +434,11 @@ impl PrimitiveLike for NotContains {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         if !multiset.contains(&values[1]) {
             Some(Value::unit())
@@ -438,7 +467,11 @@ impl PrimitiveLike for Length {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         Some(Value::from(multiset.len() as i64))
     }
@@ -467,7 +500,11 @@ impl PrimitiveLike for Remove {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         let multiset = multiset.remove(&values[1]);
         multiset.store(&self.multiset)
@@ -493,12 +530,50 @@ impl PrimitiveLike for Pick {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], _egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let multiset = ValueMultiSet::load(&self.multiset, &values[0]);
         Some(*multiset.pick().expect("Cannot pick from an empty multiset"))
     }
 }
 
+struct Sum {
+    name: Symbol,
+    multiset: Arc<MultiSetSort>,
+}
+
+impl PrimitiveLike for Sum {
+    fn name(&self) -> Symbol {
+        self.name
+    }
+
+    fn get_type_constraints(&self, span: &Span) -> Box<dyn TypeConstraint> {
+        SimpleTypeConstraint::new(
+            self.name(),
+            vec![
+                self.multiset.clone(),
+                self.multiset.clone(),
+                self.multiset.clone(),
+            ],
+            span.clone(),
+        )
+        .into_box()
+    }
+
+    fn apply(
+        &self,
+        values: &[Value],
+        _egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
+        let lhs_multiset = ValueMultiSet::load(&self.multiset, &values[0]);
+        let rhs_multiset = ValueMultiSet::load(&self.multiset, &values[1]);
+        lhs_multiset.sum(rhs_multiset).store(&self.multiset)
+    }
+}
+
 struct Map {
     name: Symbol,
     multiset: Arc<MultiSetSort>,
@@ -523,11 +598,15 @@ impl PrimitiveLike for Map {
         .into_box()
     }
 
-    fn apply(&self, values: &[Value], egraph: Option<&mut EGraph>) -> Option<Value> {
+    fn apply(
+        &self,
+        values: &[Value],
+        egraph: Option<&mut EGraph>,
+    ) -> Option<Value> {
         let egraph =
             egraph.unwrap_or_else(|| panic!("`{}` is not supported yet in facts.", self.name));
         let multiset = ValueMultiSet::load(&self.multiset, &values[1]);
         let new_multiset = multiset.map(|e| self.fn_.apply(&values[0], &[*e], egraph));
         new_multiset.store(&self.multiset)
     }
-}
+}
\ No newline at end of file
diff --git a/src/termdag.rs b/src/termdag.rs
index 4f351c4..0e42321 100644
--- a/src/termdag.rs
+++ b/src/termdag.rs
@@ -1,6 +1,6 @@
 use crate::{
     ast::Literal,
-    util::{HashMap, HashSet, IndexSet},
+    util::{HashMap, HashSet},
     Expr, GenericExpr, Symbol,
 };
 
@@ -21,8 +21,14 @@ pub enum Term {
 /// A hashconsing arena for [`Term`]s.
 #[derive(Clone, PartialEq, Eq, Debug, Default)]
 pub struct TermDag {
-    /// A bidirectional map between deduplicated `Term`s and indices.
-    nodes: IndexSet<Term>,
+    // think of nodes as a map from indices to Terms.
+    // invariant: the nodes map and the hashcons map are inverses.
+    // note that this implies:
+    // - no duplicates in nodes
+    // - every element of node is a key in hashcons
+    // - every key of hashcons is in nodes
+    pub nodes: Vec<Term>,
+    pub hashcons: HashMap<Term, TermId>,
 }
 
 #[macro_export]
@@ -48,14 +54,14 @@ impl TermDag {
     ///
     /// Panics if the term does not already exist in this [TermDag].
     pub fn lookup(&self, node: &Term) -> TermId {
-        self.nodes.get_index_of(node).unwrap()
+        *self.hashcons.get(node).unwrap()
     }
 
     /// Convert the given id to the corresponding term.
     ///
     /// Panics if the id is not valid.
-    pub fn get(&self, id: TermId) -> &Term {
-        self.nodes.get_index(id).unwrap()
+    pub fn get(&self, id: TermId) -> Term {
+        self.nodes[id].clone()
     }
 
     /// Make and return a [`Term::App`] with the given head symbol and children,
@@ -91,8 +97,10 @@ impl TermDag {
     }
 
     fn add_node(&mut self, node: &Term) {
-        if self.nodes.get(node).is_none() {
-            self.nodes.insert(node.clone());
+        if self.hashcons.get(node).is_none() {
+            let idx = self.nodes.len();
+            self.nodes.push(node.clone());
+            self.hashcons.insert(node.clone(), idx);
         }
     }
 
@@ -130,7 +138,10 @@ impl TermDag {
             Term::App(op, args) => {
                 let args: Vec<_> = args
                     .iter()
-                    .map(|a| self.term_to_expr(self.get(*a)))
+                    .map(|a| {
+                        let term = self.get(*a);
+                        self.term_to_expr(&term)
+                    })
                     .collect();
                 Expr::call_no_span(*op, args)
             }
@@ -204,7 +215,7 @@ mod tests {
         //     x, y, (g x y), and the root call to f
         // so we can compute expected answer by hand:
         assert_eq!(
-            td.nodes.as_slice().iter().cloned().collect::<Vec<_>>(),
+            td.nodes,
             vec![
                 Term::Var("x".into()),
                 Term::Var("y".into()),
@@ -225,7 +236,7 @@ mod tests {
         let (td, t) = parse_term(s);
         match_term_app!(t; {
             ("f", [_, x, _, _]) =>
-                assert_eq!(td.term_to_expr(td.get(*x)), ast::GenericExpr::Var(DUMMY_SPAN.clone(), Symbol::new("x"))),
+                assert_eq!(td.term_to_expr(&td.get(*x)), ast::GenericExpr::Var(DUMMY_SPAN.clone(), Symbol::new("x"))),
             (head, _) => panic!("unexpected head {}, in {}:{}:{}", head, file!(), line!(), column!())
         })
     }
@@ -255,4 +266,4 @@ mod tests {
         let t2 = td.app("f".into(), vec![g.clone(), x, seven, g]);
         assert_eq!(t, t2);
     }
-}
+}
\ No newline at end of file
